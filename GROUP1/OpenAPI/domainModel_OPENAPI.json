{
  "openapi": "3.0.1",
  "info": {
    "title": "DomainModel Service API",
    "description": "An ASP.NET Core Web API for managing DomainModel. Last Clean-Install 01/18/2022 21:05:58",
    "termsOfService": "https://example.com/terms",
    "contact": {
      "name": "Example Contact",
      "url": "https://example.com/contact"
    },
    "license": {
      "name": "Example License",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/api/DomainModel": {
      "post": {
        "tags": [
          "DomainModel"
        ],
        "summary": "Creates the Domain Model",
        "requestBody": {
          "description": "Domain Model DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainModelDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainModelDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DomainModelDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModelDTO"
                }
              }
            }
          },
          "400": {
            "description": "If the item is null",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "DomainModel"
        ],
        "summary": "Gets all domains",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/DomainModel/{id}": {
      "put": {
        "tags": [
          "DomainModel"
        ],
        "summary": "Updates a already created domain model",
        "operationId": "UpdatedomainmodelById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainModelDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainModelDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DomainModelDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModelDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "20'": {
            "description": "Ok update"
          }
        }
      },
      "delete": {
        "tags": [
          "DomainModel"
        ],
        "summary": "Delete a operation\r\nShould all users be able to update and delete domain models created by others? Or\r\nonly users that created a domain model can update and/delete it?\r\n  -> Pertence ao user, outros outros podem ver/copiar\r\n  -> NÃ£o pode apagar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/DomainModel/GetdomainmodelById/{id}": {
      "get": {
        "tags": [
          "DomainModel"
        ],
        "summary": "Gets domains by Id",
        "operationId": "GetdomainmodelById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/DomainModel/GetdomainmodelByType/{type}": {
      "get": {
        "tags": [
          "DomainModel"
        ],
        "summary": "Gets all existing domain models of a given type (macroscopic,microscopic, mesoscopic)",
        "operationId": "GetdomainmodelByType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Get Health. Due to limitations on .NetCore 6 -> use /health and not /api/health",
        "description": "Provides an indication about the health of the API based on CPU Usage",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          },
          "503": {
            "description": "API is unhealthy or in degraded state"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DomainModelDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "topology": {
            "type": "string",
            "nullable": true
          },
          "modelType": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "HealthStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "HealthStatus For EndPoint. Unhealthy = 0, Degraded = 1, Healthy = 2",
        "format": "int32"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \\r\\n\\r\\n \r\n                      Enter 'Bearer' [space] and then your token in the text input below.\r\n                      \\r\\n\\r\\nExample: 'Bearer 12345abcdef'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}